# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it here:
# https://github.com/bevry/cson#what-is-cson

'.source.js':
  'console.log':
    'prefix': 'log'
    'body': 'console.log($1)$2'
  'use strict':
    'prefix': 'us'
    'body': "'use strict'$1"
  'require module':
    'prefix': 'req'
    'body': 'let ${1:module} = require(\'$1\')\n$2'
  'define simple function':
    'prefix': 'f'
    'body': 'function($1) {\n\t$2\n}$3'
  'define function':
    'prefix': 'fn'
    'body': 'function($1) {\n\t$2\n}$3'
  "Express middleware":
    prefix: "xm"
    body: """
    function(req, res${1:, next}) {
    \t${0}
    }
    """
  "Express error handler":
    prefix: "xerr"
    body: """
    function(err, req, res, next) {
    \t${0}
    }
    """
'.source.c':
  'include stdio.h':
    'prefix': 'io'
    'body': '#include <stdio.h>$1'
  'include stdlib.h':
    'prefix': 'std'
    'body': '#include <stdlib.h>$1'
  'If Else':
    'prefix': 'ife'
    'body': 'if (${1:/* condition */}) {\n\t${2:/* code */}\n} else {\n\t${3:/* code */}\n}'
  'If ElseIf':
    'prefix': 'iff'
    'body': 'if (${1:/* condition */}) {\n\t${2:/* code */}\n} else if (${3:/* condition */}) {\n\t${4:/* code */}\n}'
  'If ElseIf Else':
    'prefix': 'iffe'
    'body': 'if (${1:/* condition */}) {\n\t${2:/* code */}\n} else if (${3:/* condition */}) {\n\t${4:/* code */}\n} else {\n\t${5:/* code */}\n}'

  'puts':
    'prefix': 'put'
    'body': 'puts("${1}");$2'
  '#include <>':
    'prefix': 'Inc'
    'body': '#include <${1:}.h>$2'
  '#include ""':
    'prefix': 'inc'
    'body': '#include "${1:}.h"$2'
  'if':
    'prefix': 'if'
    'body': 'if (${1:true}) {\n\t$2\n}'
  'if â€¦ else':
    'prefix': 'ife'
    'body': 'if (${1:true}) {\n\t$2\n} else {\n\t$3\n}'
  'else':
    'prefix': 'else'
    'body': 'else {\n\t$1\n}'
  'else if':
    'prefix': 'elseif'
    'body': 'else if (${1:true}) {\n\t$2\n}'
  'any function':
    'prefix': 'func'
    'body': '${1:void} ${2:name}(${3:void}) {\n\t$4\n}'
  'main()':
    'prefix': 'main'
    'body': 'int main(${1:int argc, const char *argv[]}) {\n\t${2:/* code */}\n\n\treturn 0;\n}'
  'scanf':
    'prefix': 'scanf'
    'body': 'scanf("${1:%s}", $2);$3'
  'define':
    'prefix': 'def'
    'body': '''
      #ifndef ${1:SYMBOL}_INCLUDED
      #define ${1:SYMBOL}_INCLUDED ${2:vaule}
      #endif
    '''
  'switch':
    'prefix': 'switch'
    'body': 'switch (${1:expression}) {\ncase ${2:expression}:\n\t$3\n\tbreak;$4\ndefault:\n\t$5\n}'
