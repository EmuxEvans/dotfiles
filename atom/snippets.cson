# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it here:
# https://github.com/bevry/cson#what-is-cson

'.source.js':
  "assert.strictEqual":
    'prefix': 'ase'
    'body': "assert.strictEqual(${1:actual}, ${2:expected})"
  "assert.notStrictEqual":
    'prefix': 'asn'
    'body': "assert.notStrictEqual(${1:actual}, ${2:expected})"
  "assert.deepStrictEqual":
    'prefix': 'asd'
    'body': "assert.deepStrictEqual(${1:actual}, ${2:expected})"
  'describe':
    'prefix': 'desc'
    'body': """
    describe('${1:description}', () => {
    \t${0}
    })
    """
  'it':
    'prefix': 'it'
    'body': """
    it('${1:description}', () => {
    \t${0}
    })
   """
  'mocha before':
    'prefix': 'bf'
    'body': """
    before(() => {
    \t${0}
    })
    """
  "mocha beforeEach":
    'prefix': 'bfe'
    'body': """
    beforeEach(() => {
    \t${0}
    })
    """
  "mocha after":
    'prefix': 'aft'
    'body': """
    after(() => {
    \t${0}
    })
    """
  "mocha afterEach":
    'prefix': 'afe'
    'body': """
    afterEach(() => {
    \t${0}
    })
    """
  'Object.create':
    'prefix': 'oc'
    'body': 'Object.create($1)$2'
  'Object Method':
    'prefix': 'kf'
    'body': '${1:methodName}: function(${2:attribute}) {\n\t$3\n}${4:,}'
  'Object key — key: "value"':
    'prefix': 'kv'
    'body': '${1:key}: ${2:\'${3:value}\'}${4:, }'
  'Prototype':
    'prefix': 'proto'
    'body': '${1:ClassName}.prototype.${2:methodName} = function($3) {\n\t$0\n}'
  'do':
    'prefix': 'do'
    'body': 'do {\n\t$2\n} while (${1:true});'
  'if':
    'prefix': 'if'
    'body': 'if (${1:true}) {\n\t$2\n}'
  'if … else':
    'prefix': 'ife'
    'body': 'if (${1:true}) {\n\t$2\n} else {\n\t$3\n}'
  'else':
    'prefix': 'else'
    'body': 'else {\n\t$1\n}'
  'else if':
    'prefix': 'elseif'
    'body': 'else if (${1:true}) {\n\t$2\n}'
  'for':
    'prefix' : 'for'
    'body' : 'for (let ${2:i} = 0; ${2:i} < ${1:n}; ${2:i}++) {\n\t$3\n}'
  'for in':
    'prefix': 'forin'
    'body': 'for (let ${1:variable} in ${2:object}) {\n\t${3:if (${2:object}.hasOwnProperty(${1:variable})) {\n\t\t$4\n\t\\}}\n}'
  'for of':
    'prefix': 'forof'
    'body': 'for (${1:variable} of ${2:iterable}) {\n\t$3\n}'
  'Function':
    'prefix': 'fun'
    'body': 'function ${1:functionName}($2) {\n\t$0\n}'
  'Anonymous Function':
    'prefix': 'f'
    'body': 'function($1) {\n\t$2\n}'
  'Generator':
    'prefix': 'gen',
    'body': 'function* ${1:functionName}($2) {\n\t$0\n}'
  'Anonymous Generator':
    'prefix': 'g'
    'body': 'function* ($1) {\n\t$2\n}'
  'getElementsByClassName':
    'prefix': 'get'
    'body': 'getElementsByClassName(${1:\'${2:className}\'})$3'
  'getElementsByName':
    'prefix': 'getn'
    'body': 'getElementsByName(${1:\'${2:name}\'})$3'
  'getElementsByTagName':
    'prefix': 'gett'
    'body': 'getElementsByTagName(${1:\'${2:tagName}\'})$3'
  'getElementById':
    'prefix': 'geti'
    'body': 'getElementById(${1:\'${2:id}\'})$3'
  'querySelector':
    'prefix': 'qs'
    'body': 'querySelector(${1:\'${2:query}\'})$3'
  'querySelectorAll':
    'prefix': 'qsa'
    'body': 'querySelectorAll(${1:\'${2:query}\'})$3'
  'Immediately-Invoked Function Expression':
    'prefix': 'iife'
    'body': '(function() {\n\t${1:\'use strict\';\n}\t$2\n}())'
  'log':
    'prefix': 'log'
    'body': 'console.log($1)$0'
  'warn':
    'prefix': 'warn'
    'body': 'console.warn($1)$0'
  'error':
    'prefix': 'error'
    'body': 'console.error($1)$0'
  'inspect':
    'prefix': 'inspect'
    'body': 'console.log(require(\'util\').inspect($0, { depth: null }))'
  'new Promise':
    'prefix': 'prom'
    'body': 'new Promise(function(resolve, reject) {\n\t$1\n})$0'
  'setInterval function':
    'prefix': 'interval'
    'body': 'setInterval(${2:function() {\n\t$3\n\\}}, ${1:10})'
  'setTimeout function':
    'prefix': 'timeout'
    'body': 'setTimeout(${2:function() {\n\t$3\n\\}}, ${1:10})'
  'switch':
    'prefix': 'switch'
    'body': 'switch (${1:expression}) {\n\tcase ${2:expression}:\n\t\t$4\n\t\tbreak;$5\n\tdefault:\n\t\t$3\n}'
  'try':
    'prefix': 'try'
    'body': 'try {\n\t$1\n} catch (${2:e}) {\n\t$3\n}${4: finally {\n\t$5\n\\}}'
  'while':
    'prefix': 'while'
    'body': 'while (${1:true}) {\n\t$2\n}'
  'Start Docblock':
    'prefix': '/**'
    'body': '/**\n * $1\n */$0'
  'CommonJS require':
    'prefix': 'req'
    'body': 'let ${1:module} = require(\'${1:module}\')'
  'Class':
    'prefix': 'class'
    'body': 'class ${1:ClassName} {\n\tconstructor($2) {\n\t\t$3\n\t}\n}'
  "return":
    'prefix': "r"
    'body': "return ${0}"
  "var assignment":
    'prefix': "v="
    'body': "var ${1:name} = ${2:value}"
  "let assignment":
    'prefix': "l="
    'body': "let ${1:name} = ${2:value}"
  "const assignment":
    'prefix': "co"
    'body': "const ${1:name} = ${2:value}"
  'module.exports':
    'prefix': 'me'
    'body': 'module.exports = $1'
  'console.log':
    'prefix': 'log'
    'body': 'console.log($1)$2'
  'use strict':
    'prefix': 'us'
    'body': "'use strict'$1"
  'require module(let)':
    'prefix': 'lreq'
    'body': 'let ${1:module} = require(\'$1\')\n$2'
  'require module(cost)':
    'prefix': 'creq'
    'body': 'const ${1:module} = require(\'$1\')\n$2'
  'define a simple array function':
    'prefix': 'nf'
    'body': '($1) => $2'
  'define a array function':
    'prefix': 'nfn'
    'body': '($1) => {\n\t$2\n}$3'
  "Express middleware":
    prefix: "xm"
    body: """
    function(req, res${1:, next}) {
    \t${0}
    }
    """
  "Express error handler":
    prefix: "xerr"
    body: """
    function(err, req, res, next) {
    \t${0}
    }
    """
'.source.c':
  'include stdio.h':
    'prefix': 'io'
    'body': '#include <stdio.h>$1'
  'include stdlib.h':
    'prefix': 'std'
    'body': '#include <stdlib.h>$1'
  'If Else':
    'prefix': 'ife'
    'body': 'if (${1:/* condition */}) {\n\t${2:/* code */}\n} else {\n\t${3:/* code */}\n}'
  'If ElseIf':
    'prefix': 'iff'
    'body': 'if (${1:/* condition */}) {\n\t${2:/* code */}\n} else if (${3:/* condition */}) {\n\t${4:/* code */}\n}'
  'If ElseIf Else':
    'prefix': 'iffe'
    'body': 'if (${1:/* condition */}) {\n\t${2:/* code */}\n} else if (${3:/* condition */}) {\n\t${4:/* code */}\n} else {\n\t${5:/* code */}\n}'

  'puts':
    'prefix': 'put'
    'body': 'puts("${1}");$2'
  '#include <>':
    'prefix': 'Inc'
    'body': '#include <${1:}.h>$2'
  '#include ""':
    'prefix': 'inc'
    'body': '#include "${1:}.h"$2'
  'if':
    'prefix': 'if'
    'body': 'if (${1:true}) {\n\t$2\n}'
  'if … else':
    'prefix': 'ife'
    'body': 'if (${1:true}) {\n\t$2\n} else {\n\t$3\n}'
  'else':
    'prefix': 'else'
    'body': 'else {\n\t$1\n}'
  'else if':
    'prefix': 'elseif'
    'body': 'else if (${1:true}) {\n\t$2\n}'
  'any function':
    'prefix': 'func'
    'body': '${1:void} ${2:name}(${3:void}) {\n\t$4\n}'
  'main()':
    'prefix': 'main'
    'body': 'int main(${1:int argc, const char *argv[]}) {\n\t${2:/* code */}\n\n\treturn 0;\n}'
  'scanf':
    'prefix': 'scanf'
    'body': 'scanf("${1:%s}", $2);$3'
  'define':
    'prefix': 'def'
    'body': '''
      #ifndef ${1:SYMBOL}_INCLUDED
      #define ${1:SYMBOL}_INCLUDED ${2:vaule}
      #endif
    '''
  'switch':
    'prefix': 'switch'
    'body': 'switch (${1:expression}) {\ncase ${2:expression}:\n\t$3\n\tbreak;$4\ndefault:\n\t$5\n}'

'.source.clojure':
  'ns':
    'prefix': 'ns'
    'body': """
      (ns ${1:name}
        (:require [${2:libraries}]))
      $0
    """

  'def':
    'prefix': 'def'
    'body': '(def ${1:symbol} ${2:value})'

  'defn':
    'prefix': 'defn'
    'body': """
      (defn ${1:name}
        [${2:params}]
        ${3:body})
    """

  'fn':
    'prefix': 'fn'
    'body': """
      (fn [${1:params}]
        ${2:body})$0
    """

  'let':
    'prefix': 'let'
    'body': """
      (let [${1:bindings}]
        ${2:body})
    """

  'if':
    'prefix': 'if'
    'body': """
      (if ${1:test}
        ${2:then}
        ${3:else})
    """

  'if-let':
    'prefix': 'ifl'
    'body': """
      (if-let [${1:bindings}]
        ${2:then}
        ${3:else})
    """

  'if-not':
    'prefix': 'ifn'
    'body': """
      (if-not ${1:test}
        ${2:then}
        ${3:else})
    """

  'when':
    'prefix': 'when'
    'body': """
      (when ${1:test}
        ${2:body})
    """

  'when-let':
    'prefix': 'whenl'
    'body': """
      (when-let [${1:bindings}]
        ${2:body})
    """

  'when-not':
    'prefix': 'whenn'
    'body': """
      (when-not ${1:test}
        ${2:body})
    """

  'map':
    'prefix': 'map'
    'body': '(map $1 $2)'

  'map lambda':
    'prefix': 'mapl'
    'body': '(map #($1) $2)'

  'condp':
    'prefix': 'condp'
    'body': """
    (condp ${1:pred} ${2:expr}
      $0)
    """

  'try':
    'prefix': 'try'
    'body': """
      (try
        $1
      (catch ${2:exception} e
        $3))
    """

  'prn':
    'prefix': 'prn'
    'body': '(prn $1)'

  'println':
    'prefix': 'prnl'
    'body': '(println $1)'
